import os

Import('env')
plf = {
    'le501x': 'arm_cm',
}
env['IC'] = ARGUMENTS.get('ic','le501x')
env['BASE_ARCH'] = plf[env['IC']]
env['CPPDEFINES'] = ['-D{}'.format(env['IC'].upper())]

def variant_dir_add_source(variant_dir,src_dir,src_list):
    env.VariantDir(variant_dir,src_dir,duplicate = 0)
    return File(env.subst(list(map(lambda x:os.path.join(variant_dir,x),src_list))))

def add_include(dir,path):
    inc_list = list(map(lambda x:os.path.relpath(env.subst(os.path.join(dir,x)),Dir('#').abspath),path))
    env.Append(CPPPATH = inc_list)
    return inc_list

def image_build(name,src,inc,with_startup = True,objprefix = ''):
    env['PROJ_DIR'] = Dir('.')
    src_files = env.variant_dir_add_source('build/$IC/','./',src)
    env.add_include(Dir('.').path,inc)
    env.Append(LINKFLAGS = ' $GC_OPTION ')
    target = env.plf_build(name,src_files,with_startup,objprefix)
    env.Depends(target,env['LINKSCRIPT'])
    if not 'mdk' in env['TOOLS']:
        env.AddPostAction(target,Action('$OBJDUMP -d -z -x $TARGET > ${TARGET.base}.asm'))
    return target

def app_build(app_name,src,inc,ble = True,mesh = False,prop_24g = False):
    target = image_build(app_name,src,inc)
    if not 'mdk' in env['TOOLS']:
        env.plf_postaction(target,ble,mesh,prop_24g)

env.variant_dir_add_source = variant_dir_add_source
env.add_include = add_include
env.image_build = image_build
env.app_build = app_build

SConscript(dirs = env['BASE_ARCH'], exports = ['env'])

